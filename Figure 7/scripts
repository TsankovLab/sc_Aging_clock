rm(list = ls())
library(pheatmap)
library(dplyr)
library(harmony)
library(viridis)
library(ggpubr)
library(ggplot2)
library(RColorBrewer)
library(fgsea)
library(tidyr)
library(dplyr)
library(Seurat)
library(patchwork)
library(tidyverse)
library(proxy)
library(ComplexHeatmap)
library(circlize)

#Figure_6A


srt=get(load(file="dataset path"))
out_dir <- "output path"
refined_label_meta <- 'LTforUnknown_ann_finest_level'

sampleID_meta <- 'sample'

obj=srt
category_meta_col='Age'
tag=paste0('total_woFDR_',refined_label_meta)

cor.m.colors <- function(){
  colors <- c("#003BC0", "#FFFFFF", "#D80D29")
  paletteLength <- 100
  colors_step <- colorRampPalette(colors)(paletteLength)
  breaks <- c(seq(-1, 0, length.out=50), 
              seq(0.01, 1, length.out=50))
  return(list(colors = colors_step, breaks = breaks))
}

props.m.colors <- function(props.m){
  colors <- c("#0A6265","#5BC3AE", "#E7E1BD" , "#ECA24D", "#DB4325")
  paletteLength <- 100
  seqs <- seq(0, max(props.m), length.out = 5)
  colors_step <- colorRampPalette(colors)(paletteLength)
  breaks <-   c(seq(seqs[1], seqs[2], length.out=25), 
                seq(seqs[2]+0.01, seqs[3], length.out=25),
                seq(seqs[3]+0.01, seqs[4], length.out=25),
                seq(seqs[4]+0.01, seqs[5], length.out=25))
  return(list(colors = colors_step, breaks = breaks))
}

calc.prop.by.feature <- function(dfs, group.by, ident.by){
  all.groups <- unique(Reduce(c, lapply(dfs, function(df) unique(df[,group.by]))))
  freqs.by.type <- lapply(names(dfs), function(df.name){
    df.tmp <- dfs[[df.name]][,c(group.by, ident.by)]
    
    return(as.data.frame.matrix(prop.table(table(df.tmp[,c(group.by, ident.by)]), margin = 1))[all.groups,])
  })
  names(freqs.by.type) <- names(dfs)
  return(freqs.by.type)
}

plot.freq.by.type <- function(dfs, group.by, ident.by, path){
  dfs.freq <- calc.prop.by.feature(dfs, group.by, ident.by)
  dfs.freq.env <<- dfs.freq
  path.freqs <- paste(path, "/by.type/", sep = "")
  dir.create(path.freqs, recursive = T)
  for (df.name in names(dfs.freq)){
    df <- dfs.freq[[df.name]]
    colors.heatmap <- props.m.colors(df)
    while (!is.null(dev.list()))  dev.off()
    pdf(paste(path.freqs, df.name, ".pdf", sep = ""), height = 0.5*nrow(df) + 2, width = 0.5*ncol(df)+2)
    
    pheatmap(df, color = colors.heatmap$colors, breaks = colors.heatmap$breaks,
             main = paste(df.name, " - No scaling", sep = ""),
    )
    pheatmap(df, color = colors.heatmap$colors, breaks = colors.heatmap$breaks,
             main = paste(df.name, " - Scaling by row", sep = ""), scale= "row")
    pheatmap(df, color = colors.heatmap$colors, breaks = colors.heatmap$breaks,
             main = paste(df.name, " - Scaling by column", sep = ""), scale = "column")
    while (!is.null(dev.list()))  dev.off()
  }
}

plot.all.freqs <- function(dfs, group.by, ident.by, path){
  df.prop.by.type <- do.call(cbind, unname(calc.prop.by.feature(dfs, group.by, ident.by)))
  path.all.types <- paste(path, "/all.types/", sep = "")
  dir.create(path.all.types, recursive = T)
  scale.colors <- props.m.colors(df.prop.by.type)
  while (!is.null(dev.list()))  dev.off()
  pdf(paste(path.all.types, "frequencies.pdf", sep = ""), height = 0.5*nrow(df.prop.by.type) + 2, width = 0.5*ncol(df.prop.by.type)+2)
  pheatmap(df.prop.by.type, main = paste("No scaling", sep = ""), color = scale.colors$colors, breaks = scale.colors$breaks)
  pheatmap(df.prop.by.type, main = paste("Scaling by row", sep = ""), scale= "row", color = scale.colors$colors, breaks = scale.colors$breaks)
  pheatmap(df.prop.by.type, main = paste("Scaling by column", sep = ""), scale= "column", color = scale.colors$colors, breaks = scale.colors$breaks)
  while (!is.null(dev.list()))  dev.off()
}

plot.frequencies <- function(dfs, group.by, ident.by, path){
  plot.freq.by.type(dfs, group.by, ident.by, path)
  plot.all.freqs(dfs, group.by, ident.by, path)
}

plot.corr.matrix <- function(cor.matrix, path){
  path.all.types <- paste(path, "/all.types/", sep = "")
  dir.create(path.all.types, recursive = T)
  colors.heatmap <- cor.m.colors()
  while (!is.null(dev.list()))  dev.off()
  pdf(paste(path.all.types, "cor.pdf", sep = ""), height = 0.2*ncol(cor.matrix)+2, width = 0.2*ncol(cor.matrix)+2)
  pheatmap(cor.matrix, main = "Correlation Matrix", color = colors.heatmap$colors, breaks = colors.heatmap$breaks)
  while (!is.null(dev.list()))  dev.off()
}


plot_frequencies_and_cor <- function(dfs, group.by, ident.by, path){
  plot.frequencies(dfs, group.by, ident.by, path)
  cor.freqs <- cor(do.call(cbind, calc.prop.by.feature(dfs, group.by, ident.by)), method = "spearman")
  plot.corr.matrix(cor.freqs, path)
}

plot_frequencies_and_cor_v2 <- function(dfs, group.by, ident.by, path){
  plot.frequencies(dfs, group.by, ident.by, path)
  cor.freqs <- cor(do.call(cbind, calc.prop.by.feature(dfs, group.by, ident.by)), method = "pearson")
  plot.corr.matrix(cor.freqs, path)
}


plot_networks.of.subtypes <- function(dfs,infos.by.subtype, path, group.by, ident.by, 
                                      bg.by = "", frame.by = "", gray.by = c("", ""), plot.community = F,
                                      thres.edge = 0.3, thres.edge.neg = -0.3){
  cor.freqs <- cor(do.call(cbind, unname(calc.prop.by.feature(dfs, group.by, ident.by))),
                   method = "spearman")
  layout.lst <- calculate.layout(cor.freqs, thres.edge, thres.edge.neg, infos.by.subtype)
  
  networks_graphs(cor.freqs, layout.lst, infos.by.subtype, thres.edge, thres.edge.neg, 
                  save.fig = path,
                  background.nodes.by = bg.by,
                  border.color.by = frame.by,
                  gray.nodes.by = gray.by)
  
  if (plot.community){
    coms <- calculate.communities(layout.lst$network, cor.freqs, thres.edge, thres.edge.neg)
    infos.by.subtype$community <- "out" 
    infos.by.subtype[names(coms),"community"] <- coms
    networks_graphs(cor.freqs, layout.lst, infos.by.subtype, thres.edge, thres.edge.neg, 
                    plot.fig = T, save.fig = path,
                    background.nodes.by = "community",
                    border.color.by = frame.by,
                    gray.nodes.by = gray.by,
                    edge.by.weight = FALSE)
  }
}

plot_networks.of.subtypes_v2 <- function(dfs,infos.by.subtype, path, group.by, ident.by,method, 
                                      bg.by = "", frame.by = "", gray.by = c("", ""), plot.community = F,
                                      thres.edge = 0.3, thres.edge.neg = -0.3){
  cor.freqs <- cor(do.call(cbind, unname(calc.prop.by.feature(dfs, group.by, ident.by))),
                   method = method)
  layout.lst <- calculate.layout(cor.freqs, thres.edge, thres.edge.neg, infos.by.subtype)
  
  networks_graphs(cor.freqs, layout.lst, infos.by.subtype, thres.edge, thres.edge.neg, 
                  save.fig = path,
                  background.nodes.by = bg.by,
                  border.color.by = frame.by,
                  gray.nodes.by = gray.by)
  
  if (plot.community){
    coms <- calculate.communities(layout.lst$network, cor.freqs, thres.edge, thres.edge.neg)
    infos.by.subtype$community <- "out" 
    infos.by.subtype[names(coms),"community"] <- coms
    networks_graphs(cor.freqs, layout.lst, infos.by.subtype, thres.edge, thres.edge.neg, 
                    plot.fig = T, save.fig = path,
                    background.nodes.by = "community",
                    border.color.by = frame.by,
                    gray.nodes.by = gray.by,
                    edge.by.weight = FALSE)
  }
}

srt.all.list=list(srt)
names(srt.all.list)="whole"

dfs.input = list()

for (i in 1:length(srt.all.list)){
  cat("\r", i)
  my.srt = srt.all.list[[i]]
  df = matrix(nrow = nrow(my.srt@meta.data), ncol = 4)
  colnames(df) = c("cell.name", "LTforUnknown_ann_finest_level", "sample","age_trio")
  df = as.data.frame(df)
  df[,1] = rownames(my.srt@meta.data)
  df[,2] = my.srt$LTforUnknown_ann_finest_level
  
  df[,3] = my.srt$sample
   
  df[,4] = my.srt$age_info_60_old
  

  dfs.input[[i]] = df
}

names(dfs.input) = names(srt.all.list)
out_dir <- paste0(out_dir, category_meta_col, '/', tag, '/')
    if (!file.exists(out_dir)){
        dir.create(out_dir, recursive=TRUE)
    }
    sampleID <- obj$sample
    Age <- as.numeric(obj$Age)
    df <- data.frame(sampleID, Age)
    rownames(df) <- NULL
    df <- distinct(df)
    rownames(df) <- df$sampleID

    Dout <- t(prop.table(table(obj@meta.data[,refined_label_meta], obj@meta.data[,sampleID_meta]), 2))
    df2 <- as.data.frame.matrix(Dout)

    
    df <- df[match(rownames(Dout), rownames(df)), ] 

    final <- cbind(df, df2)
    model <- function(df, subtype_names, dependant_var){

        final_model_results <- list()
        j <- 1
        for (subtype in subtype_names){
            
            model2= cor.test(df$Age,df[[subtype]],method = "spearman") 
            
            p_val=model2$p.value # pval for spearman

            final_model_results[[j]] <- list(model2, subtype, p_val)
            j <- j + 1
        }
        return(final_model_results)
    }
    model_matrix_input <- model(df=final, subtype_names=unique(obj@meta.data[,refined_label_meta]), dependant_var=category_meta_col)

    if (is.character(model_matrix_input)){
        message("'category_meta_col' must exactly match one of the metadata columns in 'obj'")
        stop()
    }

    p_vals <- c()
    names <- c()
    gradients <- c()

    for (i in 1:length(model_matrix_input)){
        p_val <- model_matrix_input[[i]][[3]][1]
        name <- model_matrix_input[[i]][[2]][1]
        gradient <- model_matrix_input[[i]][[1]]$estimate[1]# for spearman test
        p_vals <- append(p_vals, p_val)
        names <- append(names, name)
        gradients <- append(gradients, gradient)
    }

    out_df <- data.frame(names, p_vals, gradients)
    #out_df$p_vals <- p.adjust(out_df$p_vals, method = 'fdr')

    out_df$Significance <- 'temp'
    out_df$Significance[out_df$p_vals > 0.05] <- 'Not Significant'
    out_df$Significance[out_df$p_vals < 0.05] <- 'Significant'
    directed_p_value <- c()
    for (row in 1:nrow(out_df)){
        if (out_df[row,'gradients'] < 0){
            directed_p_value <- append(directed_p_value, (-1*out_df[row,'p_vals']))
        } else {
            directed_p_value <- append(directed_p_value, (out_df[row,'p_vals']))
        }
    }
    out_df$directed_p_value <- directed_p_value

    out_df$direction <- 'temp'
    out_df$direction[out_df$gradients > 0] <- 'positive correlation'
    out_df$direction[out_df$gradients < 0] <- 'negative correlation'

    out_df$log_pval <- -log10(out_df$p_vals)
    out_df$directed_log_pval <- sign(out_df$directed_p_value) * out_df$log_pval
    out_df$direction[out_df$p_vals >= 0.05] <- 'not_sig'


for (i in 1:length(dfs.input)){
  cat("\r", i)
  
  tmp = table(dfs.input[[i]]$LTforUnknown_ann_finest_level)
  tmp = as.data.frame(tmp)
  tmp = cbind(tmp, rep(names(dfs.input)[i], nrow(tmp)))
  rownames(tmp) = tmp[,1]
  
  colnames(tmp) = c("LTforUnknown_ann_finest_level", "n.cells", "highlevel.celltype")
  if (i == 1) {infos = tmp} else {infos = rbind(infos, tmp)}
}

dim(infos)
head(infos)
cell_prop_norm_comp = data.frame(matrix(NA, nrow = length(unique(srt.all.list[[1]]$sample)), ncol = 1))
colnames(cell_prop_norm_comp) = c("sample")
cell_prop_norm_comp$sample = unique(srt.all.list[[1]]$sample)

for (i in 1:length(srt.all.list)){
  cat("\r", i)
  tmp = srt.all.list[[i]]
  print(names(srt.all.list[i]))
  print(unique(tmp$LTforUnknown_ann_finest_level))
 
  Dout <- prop.table(table(tmp$LTforUnknown_ann_finest_level, tmp$sample), 2) 
  
  print(dim(Dout))
  Dout_edit = as.data.frame(as.matrix(t(Dout))) 
  Dout_edit = as.data.frame(pivot_wider(Dout_edit, names_from = "Var2", values_from = "Freq"))
  names(Dout_edit)[names(Dout_edit) == "Var1"] <- "sample"
  cell_prop_norm_comp = full_join(cell_prop_norm_comp, Dout_edit, by = "sample") 
  cell_prop_norm_comp[is.na(cell_prop_norm_comp)] <- 0
}


data <- cell_prop_norm_comp[,-1]

dim(data)

source("plot_community.R")

out_df[1:4,1:4]
res.comp=as.data.frame(out_df$directed_log_pval,out_df$names)

res.comp=res.comp[ order(rownames(res.comp)) , ,drop=F]


pallete.bg <- c("#fea3a0", "#ffba99","#fed595", "#ffe696", "#fffb97", "#eaff98", "#b3eb92","#adf4ec", "#84d5fd", "#a8c5fc", "#d5adf3", "#ffadd1", "#CCCCCC")[c(9,13,1)] ## adding gray color #CCCCCC

for (i in 1:ncol(res.comp))
{
  cat("\r", i)
  labeling = rep("NoCorr", nrow(infos))
  se = which(res.comp[,i] < log10(0.05))
  labeling[se] = "Neg"
  se = which(res.comp[,i] > -log10(0.05))
  labeling[se] = "Pos"
  infos.2 = cbind(infos, labeling)
  

  size = rep(3, nrow(infos))
  se = which(labeling %in% c("Pos", "Neg"))
  size[se] = abs(res.comp[se,i]) * 3
  se = which(size > 20)
  size[se] = 20
  
  
    plot_networks.of.subtypes.2(data, infos.2, paste0("output path", colnames(res.comp)[i], "._wosizechangeall"), 
                              thres.edge = 0.3,  
                              thres.edge.neg = -0.3,   
                              text.size = 0.7,
                              nodes.size = size,
                              draw.legend = T,
                              legend.label = sort(unique(infos.2$labeling)),
                              bg.by = "labeling")
}


#Figure_6B

srt=get(load(file="whole dataset path"))

table(srt$cpdb_lvl_2.5_uniform_v2)
  
srt$cpdb_lvl_2.5_uniform_v3=srt$cpdb_lvl_2.5_uniform_v2
srt$cpdb_lvl_2.5_uniform_v3[srt$LTforUnknown_ann_finest_level == "Basal resting"] <- 'Basal resting'
srt$cpdb_lvl_2.5_uniform_v3[srt$LTforUnknown_ann_finest_level == "Suprabasal"] <- 'Suprabasal'
srt$cpdb_lvl_2.5_uniform_v3[srt$LTforUnknown_ann_finest_level == "Hillock-like"] <- 'Hillock-like'
table(srt$cpdb_lvl_2.5_uniform_v3)

srt$cpdb_lvl_2.5_uniform_v4=srt$cpdb_lvl_2.5_uniform_v3
srt$cpdb_lvl_2.5_uniform_v4[srt$cpdb_lvl_2.5_uniform_v2 == "CD4T"] <- 'T-total'
srt$cpdb_lvl_2.5_uniform_v4[srt$cpdb_lvl_2.5_uniform_v2 == "CD8T"] <- 'T-total'
table(srt$cpdb_lvl_2.5_uniform_v4)

obj=srt

Idents(obj)="cpdb_lvl_2.5_uniform_v4"

obj.subtype.list <- SplitObject(obj, split.by = "cpdb_lvl_2.5_uniform_v4")

df_list <- list()

for (i in 1:length(obj.subtype.list)) {

subtype <- obj.subtype.list[[i]]
print(names(obj.subtype.list[i]))
print(ncol(subtype))
srt=subtype

#### Run cNMF ####
force=FALSE
k_list = c(5:30)
k_selections = c(5:30)
nfeat = 3000
cores= 100
metacells = FALSE
min_cells = 20 # default 100

metacells_k = 40
max_shared = 20
metacells_groups = 'sample'

has_space <- grepl(" ", names(obj.subtype.list[i]))
if (has_space) {
  string <- gsub(" ", "_", names(obj.subtype.list[i]))
}else{
     string=names(obj.subtype.list[i])
}

if(ncol(subtype)>=15000){
       cnmf_name=paste0("no_MetaCell_HLCA_Full_hvg_",string,"_downsampled")}
if(ncol(subtype)<15000){
       cnmf_name=paste0("no_MetaCell_HLCA_Full_hvg_",string)}

srt$age_info_60_old <- factor(srt$age_info_60_old, levels=c("Young","Intermediate","Old"))

force=F
nfeat = 3000
k_list = c(5:30)
k_selection = 30
top_nmf_genes=25 # top genes to use to compute module scores from cnmf modules
do.fgsea=TRUE # run pathway enrichments
metacells= FALSE
    

metaGroupNames = c('sample','CN','Age',"age_info_60_old","cpdb_lvl_2.5_uniform_v4")
org = 'human'
    
source("/sc/arion/projects/Tsankov_Normal_Lung/users/kex07/Ke_HLCA/Atlas_Scripts_Isha/useful_functions.R")

reductionName="umap"

if (!exists('cnmf_name')) cnmf_name = ''
cnmf_out = paste0('cNMF_normalized/cNMF_',cnmf_name,'_',paste0(k_list[1],'_',k_list[length(k_list)]),'_vf',nfeat)
dir.create (projdir, recursive=T)
    
cnmf_spectra = read.table (paste0(cnmf_out,'/cnmf/cnmf.spectra.k_',k_selection,'.dt_0_3.consensus.txt'))

vf = read.table (paste0(projdir,cnmf_out,'/vf',nfeat,'.txt'))[[1]]
vf = gsub ('-','.',vf)
if (all (vf == colnames(cnmf_spectra)))
      {
      vf = read.table (paste0(projdir,cnmf_out,'/vf',nfeat,'.txt'))[[1]]
      colnames (cnmf_spectra) = vf
      } else {
      message ('WARNING variable features not in same order in the spectra file!')            
      }

cnmf_spectra = t(cnmf_spectra)
max_spectra = apply (cnmf_spectra, 1, which.max)

cnmf_spectra_nonunique = lapply (1:ncol(cnmf_spectra), function(x) 
      {
      tmp = cnmf_spectra[order(-cnmf_spectra[,x]),x,drop=F]
      head(rownames(tmp),top_nmf_genes)
      })
names(cnmf_spectra_nonunique) = paste0('CN',seq_along(cnmf_spectra_nonunique))

cnmf_spectra_nonunique_full = lapply (1:ncol(cnmf_spectra), function(x) 
      {
      tmp = cnmf_spectra[order(-cnmf_spectra[,x]),x,drop=F]
      head(rownames(tmp),top_nmf_genes)
      })
names(cnmf_spectra_nonunique_full) = paste0('CN',seq_along(cnmf_spectra_nonunique_full))

cnmf_spectra_unique = lapply (1:ncol(cnmf_spectra), function(x) 
      {
      tmp = cnmf_spectra[names(max_spectra[max_spectra == x]),x,drop=F]
      tmp = tmp[order(-tmp[,1]),,drop=F]
      head(rownames(tmp),top_nmf_genes)
      })
names(cnmf_spectra_unique) = paste0('CN',seq_along(cnmf_spectra_unique))

cnmf_spectra_unique_full = lapply (1:ncol(cnmf_spectra), function(x) 
      {
      tmp = cnmf_spectra[names(max_spectra[max_spectra == x]),x,drop=F]
      tmp = tmp[order(-tmp[,1]),,drop=F]
      rownames(tmp)
      
      })
names(cnmf_spectra_unique_full) = paste0('CN',seq_along(cnmf_spectra_unique))


cnmf_spectra_nonunique


  for (cn in names(cnmf_spectra_nonunique)) {
    
  
    df <- data.frame(Gene = cnmf_spectra_nonunique[[cn]])
    
    
    colnames(df) <- paste(names(obj.subtype.list[i]), cn, sep = "_")
    
    
    df_list[[paste(names(obj.subtype.list[i]), cn, sep = "_")]] <- df
  }

}
final_df <- bind_cols(df_list)
final_df$CD8T_CN14
final_df$Macrophages_CN14
dim(final_df)

filtered_final_df <- final_df[!grepl("HSC|PNEC|Tuft|Ionocyte|pDCs|Hillock-like|Goblet|Mesothelium", names(final_df), ignore.case = TRUE)]

dim(filtered_final_df)
final_df.copy=final_df
final_df=filtered_final_df

jaccard_index <- function(x, y) {
  length(intersect(x, y)) / length(union(x, y))
}


index_matrix <- matrix(0, nrow = length(final_df), ncol = length(final_df))
rownames(index_matrix) <- names(final_df)
colnames(index_matrix) <- names(final_df)

for (i in seq_along(final_df)) {
  for (j in seq_along(final_df)) {
    index_matrix[i, j] <- jaccard_index(final_df[[i]], final_df[[j]])
  }
}

dim(index_matrix)
row_subset <- apply(index_matrix, 1, function(row) any(row > 0.2))
col_subset <- apply(index_matrix, 2, function(col) any(col > 0.2))
subset_matrix <- index_matrix[row_subset, col_subset]



non_identical_rows <- apply(index_matrix, 1, function(row) any(row != 1))
non_identical_cols <- apply(index_matrix, 2, function(col) any(col != 1))


filtered_matrix <- index_matrix[non_identical_rows, non_identical_cols]


row_subset <- apply(filtered_matrix, 1, function(row) any(row >= 0.3 & row != 1))

col_subset <- apply(filtered_matrix, 2, function(col) any(col >= 0.3 & col != 1))


subset_matrix <- filtered_matrix[row_subset, col_subset]

dim(subset_matrix)
method="spearman"

all_results=read.csv ("data path ... HLCA_Full_module_spearman_ranking_all_celltypes_top25_wFDR.csv")

Signif_results <- all_results[all_results$p_value <= 0.05, ]
dim(Signif_results)
Signif=c(unique(Signif_results$celltype_CN))
sort(Signif)

Signif<- sub("_CN([0-9]+)$", ".\\1", Signif)
rows_to_keep_signif <- (rownames(filtered_matrix) %in% Signif)
sum(rows_to_keep_signif)

columns_to_keep_signif <- (colnames(filtered_matrix) %in% Signif)
sum(columns_to_keep_signif)

filtered_matrix <- filtered_matrix[rows_to_keep_signif, columns_to_keep_signif, drop = FALSE]

dim(filtered_matrix)

print(subset_matrix)

DBTS=c( "Club_CN16","Club_CN24","Multiciliated_CN24","Club_CN9","Multiciliated_CN17","Secretory_CN15","Macrophages_CN29","Monocyte_CN25","DC_CN18", "Monocytes_CN17", "NK_CN21", "B_CN13", "LymphaticEC_CN15", "AT1_CN20", "Multiciliated_CN23", "Secretory_CN28", "AT2_CN30", "SmoothMuscle_CN27", "Bloodvessels_CN29", "Macrophages_CN22", "Basal_CN29", "Pericytes_CN25", "SmoothMuscle_CN22", "Fibroblasts_CN23", "Mast_CN19", "Bloodvessels_CN19", "LymphaticEC_CN24", "AT1_CN24", "AT2_CN20", "Mesothelium_CN9", "B_CN14", "Plasma_CN22", "Bloodvessels_CN24", "LymphaticEC_CN26", "Fibroblasts_CN25", "DC_CN30", "Macrophages_CN27", "Plasma_CN11", "Mesothelium_CN7")

DBTS<- sub("_CN([0-9]+)$", ".\\1", DBTS)
all_results1=all_results
rownames(subset_matrix)<- sub("_CN([0-9]+)$", ".\\1", rownames(subset_matrix))
colnames(subset_matrix)<- sub("_CN([0-9]+)$", ".\\1", colnames(subset_matrix))
colnames(subset_matrix)
dim(subset_matrix)

rows_to_keep <- !(rownames(subset_matrix) %in% DBTS)

columns_to_keep <- !(colnames(subset_matrix) %in% DBTS)

filtered_matrix <- subset_matrix[rows_to_keep, columns_to_keep, drop = FALSE]


Signif<- sub("_CN([0-9]+)$", ".\\1", Signif)
rows_to_keep_signif <- (rownames(filtered_matrix) %in% Signif)
sum(rows_to_keep_signif)

columns_to_keep_signif <- (colnames(filtered_matrix) %in% Signif)
sum(columns_to_keep_signif)

filtered_matrix <- filtered_matrix[rows_to_keep_signif, columns_to_keep_signif, drop = FALSE]

dim(filtered_matrix)

print(subset_matrix)

value_range <- c(0.05,0.2, 0.25, 0.3, 0.4,0.6,1)

color_palette <- rev(paletteer::paletteer_d("rcartocolor::ag_Sunset"))

colors <- c("white", color_palette)
col_fun <- colorRamp2(c(0,value_range), colors)

colors <- c( color_palette)
col_fun <- colorRamp2(c(value_range), colors)
mtx=Heatmap(subset_matrix, 
        name = "Jaccard Index", 
        col = colorRamp2(c(0, 1), c("white", "red")),
        # row_title = "CD4 Modules",
        row_title = "CNMF Modules",
        column_title = "CNMF Modules",
        cluster_rows = TRUE,
        cluster_columns = TRUE,
        show_row_names = TRUE,
        show_column_names = TRUE,
        cell_fun = function(j, i, x, y, width, height, fill) {
            if(subset_matrix[i, j] > 0.2) {
                grid.text(sprintf("%.2f", subset_matrix[i, j]), x, y, gp = gpar(fontsize = 10))
            }
        })


    pdf(file = file.path(figures.dir,  
                        
                         paste("Jaccard_Distance_analysis_HLCA_all_vs_all_lung_nonunique", "pdf", sep = ".")),
        width = 30,
        height = 30)
  
    dev.off()



unique_labels <- rownames(filtered_matrix)

label_colors <- rep("black", length(unique_labels)) 
names(label_colors) <- unique_labels


row_colors <- rep("white", length(unique_labels)) 
col_colors <- rep("white", length(unique_labels))
names(row_colors) <- unique_labels
names(col_colors) <- unique_labels


for (i in seq_len(nrow(Signif_results))) {
  label <- Signif_results$celltype_CN[i]
  if (label %in% unique_labels) {
    correlation <- Signif_results$correlation[i]
    color <- ifelse(correlation > 0, "red", ifelse(correlation < 0, "blue", "white"))
    row_colors[label] <- color
    col_colors[label] <- color
  }
}



row_annotation <- rowAnnotation(
  Correlation = row_colors[rownames(filtered_matrix)], 
  col = list(Correlation = c("red" = "#D8423D", "blue" = "#0091CA", "white" = "white")), 
  annotation_legend_param = list(
    Correlation = list(
      title = "Row Correlation",
      at = c("red", "blue"),
      labels = c("Positive", "Negative"),
      labels_gp = gpar(fontsize = 6), 
      title_gp = gpar(fontsize = 6)
    )
  ),
 
  show_annotation_name=FALSE,
  width=unit(2,"pt")
)



column_annotation <- HeatmapAnnotation(
  Correlation = col_colors[colnames(filtered_matrix)], 
  col = list(Correlation = c("red" = "#D8423D", "blue" = "#0091CA", "white" = "white")),
  show_legend = FALSE, 
  show_annotation_name=FALSE,
  height=unit(2, "pt") 
)




mtx=Heatmap(filtered_matrix, 
        name = "Jaccard Index", 
        
        col=col_fun,
        row_title = "CNMF Modules",
        column_title = "CNMF Modules",
        show_row_dend = FALSE,
        show_column_dend = FALSE,
        show_row_names = TRUE,
        show_column_names = TRUE,
        row_names_gp = gpar(fontsize = 6), 
        column_names_gp = gpar(fontsize = 6), 
        row_title_gp = gpar(fontsize = 6), 
        column_title_gp = gpar(fontsize = 6), 
        right_annotation = row_annotation,
        bottom_annotation = column_annotation,
       
        heatmap_legend_param = list(
            title_gp = gpar(fontsize = 6),
            labels_gp = gpar(fontsize = 6) 
        )
             }
         }
        )



    pdf(file = file.path(figures.dir,  
                       
                         paste("Jaccard_Distance_analysis_HLCA_all_vs_all_lung_nonunique_filtered_matrix_square", "pdf", sep = ".")),
        width = 4, 
        height = 3.5) 
    print(mtx)
    
    dev.off()


