rm(list=ls())
library(Seurat)
library(patchwork)
library(tidyverse)
library(harmony)
library(viridis)
library(ggpubr)
library(ggplot2)
library(RColorBrewer)
library(fgsea)
library(tidyr)
library(dplyr)
library(ComplexHeatmap)
library(circlize)
library(preprocessCore)
library(fitdistrplus)
library(stats)
library(Matrix)
library(hash)
library(ggExtra)
library(ggsci)
library(Rcpp)
library(patchwork)
library(remotes)
library(devtools)
library(sp)
library(fgsea)
library(org.Hs.eg.db)
library(limma)


#Figure_3A
srt=get(load(file = "Myeloid comartment of dataset"))

figures.dir <- "output path"

scrna_pipeline_dir="/scrna_pipeline/cnmf/"
projdir="/sc/arion/projects/Tsankov_Normal_Lung/users/kex07/Ke_HLCA_full/cNMF/"

force=FALSE
k_list = c(31:50)
k_selections = c(31:50)
nfeat = 3000
cores= 100
metacells = FALSE
min_cells = 20 

metacells_k = 40
max_shared = 20
metacells_groups = 'sample'

cnmf_name='no_MetaCell_HLCA_Full_hvg_Myeloid_downsampled_normalized_over0'
srt$age_info_60_old <- factor(srt$age_info_60_old, levels=c("Young","Intermediate","Old"))

force=F
nfeat = 3000

k_selection = 35 
top_nmf_genes=25 
do.fgsea=TRUE 
metacells= FALSE


metaGroupNames = c('sample','CN','Age',"age_info_60_old","cpdb_lvl_2.5_uniform_v3")
org = 'human'
reductionName="umap"

source("/sc/arion/projects/Tsankov_Normal_Lung/users/kex07/Ke_HLCA/Atlas_Scripts_Isha/useful_functions.R")
if (!exists('cnmf_name')) cnmf_name = ''
cnmf_out = paste0("output path")
dir.create (projdir, recursive=T)
cnmf_spectra = read.table ( "output path/cnmf/cnmf.spectra.k_35.dt_0_3.consensus.txt")
vf = read.table ("output path/vf3000.txt")[[1]]
vf = gsub ('-','.',vf)
if (all (vf == colnames(cnmf_spectra)))
      {
      vf = read.table (paste0("output path/vf3000.txt"))[[1]]
      colnames (cnmf_spectra) = vf
      } else {
      message ('WARNING variable features not in same order in the spectra file!')            
      }


cnmf_spectra = t(cnmf_spectra)
max_spectra = apply (cnmf_spectra, 1, which.max)

cnmf_spectra_nonunique = lapply (1:ncol(cnmf_spectra), function(x) 
      {
      tmp = cnmf_spectra[order(-cnmf_spectra[,x]),x,drop=F]
      head(rownames(tmp),top_nmf_genes)
      })
names(cnmf_spectra_nonunique) = paste0('CN',seq_along(cnmf_spectra_nonunique))

cnmf_spectra_nonunique_full = lapply (1:ncol(cnmf_spectra), function(x) 
      {
      tmp = cnmf_spectra[order(-cnmf_spectra[,x]),x,drop=F]
      head(rownames(tmp),top_nmf_genes)
      })
names(cnmf_spectra_nonunique_full) = paste0('CN',seq_along(cnmf_spectra_nonunique_full))

cnmf_spectra_unique = lapply (1:ncol(cnmf_spectra), function(x) 
      {
      tmp = cnmf_spectra[names(max_spectra[max_spectra == x]),x,drop=F]
      tmp = tmp[order(-tmp[,1]),,drop=F]
      head(rownames(tmp),top_nmf_genes)
      })
names(cnmf_spectra_unique) = paste0('CN',seq_along(cnmf_spectra_unique))

cnmf_spectra_unique_full = lapply (1:ncol(cnmf_spectra), function(x) 
      {
      tmp = cnmf_spectra[names(max_spectra[max_spectra == x]),x,drop=F]
      tmp = tmp[order(-tmp[,1]),,drop=F]
      rownames(tmp)
      
      })
names(cnmf_spectra_unique_full) = paste0('CN',seq_along(cnmf_spectra_unique))


cnmf_spectra_nonunique

ModScoreCor2 = function (seurat_obj, geneset_list, listName, cor_threshold = NULL, pos_threshold = .1, outdir)
        {        
        message ('Run AddModuleScore')
    seurat_obj = AddModuleScore (seurat_obj, geneset_list)
        seurat_obj@meta.data = seurat_obj@meta.data[, !colnames (seurat_obj@meta.data) %in% names (geneset_list)]
        colnames(seurat_obj@meta.data)[colnames(seurat_obj@meta.data) %in% paste0('Cluster',seq_along(geneset_list))] = names (geneset_list)
        message (paste('Annotate cells based on highest module score and store in column:',paste0(listName, '_r',cor_threshold,'_max')))
        if (length (geneset_list) == 1) 
          {
          seurat_obj@meta.data[, paste0(listName, '_r',cor_threshold,'_max')] = ifelse (seurat_obj@meta.data[,names (geneset_list)] > pos_threshold, 'pos','neg')
          pdf (paste0(outdir, listName, '_modulescore_distribution_cor_threshold_',cor_threshold,'_score_',pos_threshold,'.pdf'))
          hist (seurat_obj@meta.data[,names(geneset_list)])
          abline (v = pos_threshold)
          dev.off()
          } else {
          seurat_obj@meta.data[, paste0(listName, '_r',cor_threshold,'_max')] = sapply (seq_along(colnames(seurat_obj)), function(x) colnames(seurat_obj@meta.data[,names(geneset_list)])[which.max (seurat_obj@meta.data[x,names(geneset_list)])])           
          }
        if (!is.null(cor_threshold))
                {
                message ('cor_threshold provided! Filtering gene sets based on initial correlation to module score')  
                filtered_geneset_list = list()
                geneset_cor_list = list()
                for (i in names(geneset_list))
                        {       
                        geneset_cor = cor (seurat_obj@meta.data[,i], as.matrix(t(seurat_obj@assays$RNA@data[rownames(seurat_obj@assays$RNA@data) %in% geneset_list[[i]],])))
                        geneset_cor_list[[i]] = geneset_cor
                        geneset_cor_names = colnames (geneset_cor)[geneset_cor > cor_threshold]
                        geneset_cor_names = geneset_cor_names[!is.na (geneset_cor_names)]
                        filtered_geneset_list[[i]] = geneset_cor_names
                        }
                if (!is.null (outdir)) 
                        {
                        lapply (seq_along(filtered_geneset_list), function(x) write.csv (filtered_geneset_list[[x]], paste0(outdir,'Corfiltered_Module_score_gene_list_', names(filtered_geneset_list)[x],'.csv')))
                        pdf (paste0(outdir, listName, 'Corfiltered_modulescore_distribution.pdf'))
                        lapply (seq_along(filtered_geneset_list), function(x) 
                                {
                                hist (geneset_cor_list[[x]], title = names(geneset_cor_list)[x])
                                abline (v = cor_threshold)
                                })
                        dev.off()
                        }
                message ('Re-run AddModuleScore using corfiltered genes')
                seurat_obj = AddModuleScore (seurat_obj, filtered_geneset_list, name = listName)
                seurat_obj@meta.data = seurat_obj@meta.data[, !colnames (seurat_obj@meta.data) %in% paste0(names(geneset_list),'_r',cor_threshold)]
                colnames(seurat_obj@meta.data)[colnames(seurat_obj@meta.data) %in% paste0('Cluster',seq_along(geneset_list))] = paste0(names(geneset_list),'_r',cor_threshold)
                if (length (geneset_list) == 1) 
                  {
                  seurat_obj@meta.data[, paste0(listName, '_r',cor_threshold,'_max')] = ifelse (seurat_obj@meta.data[,paste0(names(geneset_list),'_r',cor_threshold)] > pos_threshold, 'pos','neg')
                  pdf (paste0(outdir, listName, '_modulescore_distribution_cor_threshold_',cor_threshold,'_score_',pos_threshold,'.pdf'))
                  hist (seurat_obj@meta.data[,paste0(names(geneset_list),'_r',cor_threshold)])
                  abline (v = pos_threshold)
                  dev.off()
                  } else {
                  seurat_obj@meta.data[, paste0(listName, '_r',cor_threshold,'_max')] = sapply (seq_along(colnames(seurat_obj)), function(x) colnames(seurat_obj@meta.data[,paste0(names(geneset_list),'_r',cor_threshold)])[which.max (seurat_obj@meta.data[x,paste0(names(geneset_list),'_r',cor_threshold)])])        
                  }
                }
        return (seurat_obj)
        } 


cnmf_spectra_nonunique

message ('test AddModuleScore: top25')
flag <- TRUE
tryCatch(srt <- AddModuleScore(srt, features = cnmf_spectra_nonunique), error = function(e) flag <<-FALSE)
if (!flag) {print(paste0("Skipping ",  names(obj.subtype.list[1])))}
if (!flag) {
  i=i+1
} else {
  srt = ModScoreCor2 (
        seurat_obj = srt, 
        geneset_list = cnmf_spectra_nonunique, 
        cor_threshold = NULL, 
        pos_threshold = NULL, # threshold for fetal_pval2
        listName = 'CN', outdir = paste0(projdir,'Plots/'))
}

metaGroupNames = c('sample','CN','Age',"age_info_60_old","cpdb_lvl_2.5_uniform")

srt$CN = 'CN'
ccomp_df = srt@meta.data[,c(names(cnmf_spectra_nonunique), metaGroupNames), drop=FALSE]

ccomp_df$CN=NULL

sample_level_df <- ccomp_df %>%
  group_by(sample, Age) %>%
  
  dplyr::summarise(across(starts_with("CN"), mean, na.rm = TRUE), .groups = 'drop')

cn_columns <- grep("^CN", colnames(sample_level_df), value = TRUE)
cn_data <- sample_level_df %>% select(all_of(cn_columns))

# CN module to CN module correlation
correlation_matrix <- cor(cn_data, method = "pearson")

age_info_numeric <- as.numeric(factor(sample_level_df$Age))

spearman_results <- sapply(cn_data, function(col) {
  test <- cor.test(col, age_info_numeric, method = "spearman")
  c(correlation = test$estimate, p.value = test$p.value)
})


spearman_results
p_values <- spearman_results["p.value", ]


p_values_fdr <- p.adjust(p_values, method = "fdr")


spearman_results <- rbind(spearman_results, p.value_fdr = p_values_fdr)


print(spearman_results)
spearman_results["p.value", ]=spearman_results["p.value_fdr", ]
print(spearman_results)

spearman_results_df <- data.frame(t(spearman_results))
colnames(spearman_results_df) <- c("correlation.rho", "p.value")


spearman_results_df$directed_log_pval <- -log10(spearman_results_df$p.value) * sign(spearman_results_df$correlation.rho)
spearman_results_df$names <- rownames(spearman_results_df)


spearman_results_df$direction <- ifelse(spearman_results_df$correlation.rho > 0, "Positive", 
                                        ifelse(spearman_results_df$correlation.rho < 0, "Negative", "Neutral"))

out_df <- spearman_results_df[, c("names", "directed_log_pval", "direction")]

out_df$direction[abs(out_df$directed_log_pval) <= 1.3] <- 'not_sig'

figs <- list()

m <- ggdotchart(out_df, x = "names", y = "directed_log_pval",
                color = "direction",                             
                palette = c("#00AFBB", "#D3D3D3", "#FC4E07"),    
                sorting = "descending",                        
                add = "segments",                               
                add.params = list(color = "lightgray", size = 2),
                title = paste0('spearman regression composition analysis'),
                dot.size = 8,                                  
                font.label = list(color = "white", size = 8, vjust = 0.5), 
                ggtheme = theme_pubr()                        
) +
    geom_hline(yintercept = 1.30103, linetype = 2, color = "lightgray") +
    geom_hline(yintercept = -1.30103, linetype = 2, color = "lightgray") +
    geom_hline(yintercept = 0, linetype = 1, color = "black")

figs[[1]] <- m


pdf(file=paste0(figures.dir,"/HLCA_full_composition_Myeloidover0_lollipop_test_fdr_adjusted_CN30.pdf"),height=6,width=7 )

print(figs[[1]])

dev.off()

#Figure_3B,C&D

hlca=srt
hlca$age_trio <- 'unknown'
hlca$age_trio[hlca$Age %in% as.character(seq(from=0.0, to=39.5, by=0.5))] <- 'young'
hlca$age_trio[hlca$Age %in% as.character(seq(from=40.0, to=59.5, by=0.5))] <- 'intermediate'
hlca$age_trio[hlca$Age %in% as.character(seq(from=60.0, to=150.0, by=0.5))] <- 'old'
table(hlca$age_trio)

h=hash()
#Choose the module
h[["Mm3"]]=list(c('TMSB4X','RAB5IF','ATP5F1E','SELENOH','ATP5MG','ATP5PO','BLOC1S1','GPX1','NDUFA11','ATP5MF','NBEAL1','ATP5MC3','ELOB','ATP5MK','ARPC1B','CSTB','ATP5MJ','ATP5ME','NDUFC2','FTH1','DYNLL1','S100A6','CD63','FTL','PELATON'))

h[["Mm29"]]=list(c('GBP1','CXCL10','ISG15','GBP5','IFIT2','IFIT3','IFIT1','STAT1','EPSTI1','MX1','WARS1','IFI44L','TNFSF10','CXCL9','ISG20','TNFSF13B','VAMP5','CALHM6','IFITM3','IRF7','GBP2','PLEK','TNIP3','SP110','XAF1'))

h [['MHC_II_GENES']]=list(c("HLA-DMA","HLA-DMB","HLA-DOB","HLA-DOA","HLA-DPA1","HLA-DPB1","HLA-DQA1","HLA-DQA2","HLA-DQB1","HLA-DQB2","HLA-DRA","HLA-DRB1","HLA-DRB5","CD74"))
h [['MHC_I_GENES']]=list(c("HLA-A","HLA-B","HLA-C","HLA-E","HLA-F","HLA-G"))

head(hlca)
output_path <-"output path"

hlca.celltype=unique(hlca$orig.ident)

number=length(h)
srt = hlca


tag = "Mm3Fig3B"
tag = "Mm29Fig3C"

for (j in 1:length(hlca.celltype)){
     
      hlca1 <- subset(x = hlca, subset = age_trio %in% c('young', 'intermediate', 'old') & orig.ident == hlca.celltype[j]); tag <- paste0("HLCA_marker_orig.ident_selected_KX_.",hlca.celltype[j])
   
    obj <- hlca1; split<-"sample"
    plots <- list()
    x <- 0
    for (i in hash::keys(h)){
        print(i)
        name = i
        flag <- TRUE
        tryCatch(srt <- AddModuleScore(obj, features = h[[i]], name = name), error = function(e) flag <<-FALSE)
        if (!flag) {print(paste0("Skipping ", name))}
        if (!flag) next
        obj.list <- SplitObject(srt, split.by = split)
        x <- x + 1
        module_scores_list <- list()
        Age_status_list <- list()
        # this is median
        for (i in 1:length(obj.list)) {
            obj2 <- obj.list[[i]]
            median_module_score <- median(obj2@meta.data[,paste0(name, "1")])
            Age <- obj2@meta.data[,'age_trio']
            module_scores_list[i] <- median_module_score
            Age_status_list[i] <- Age
        }    
        module_scores_vec <- as.vector(module_scores_list)
        Age_status_vec <- as.vector(Age_status_list)
        names(module_scores_vec) <- names(obj.list)
        names(Age_status_vec) <- names(obj.list)
        module_scores_df <- as.data.frame(module_scores_vec) # patients (rows) vs module score (cols)
        Age_status_df <- as.data.frame(Age_status_vec)
        merged_df <- rbind(module_scores_df, Age_status_df)
        merged_df <- t(merged_df)
        colnames(merged_df) <- c(name, "Age")
        module_scores_mtx <- as.matrix(merged_df)
        module_scores_mtx <- as.data.frame(module_scores_mtx)

        if (split == 'SSample'){
            levels <- c('young', 'old')
            palette <- c("#0091CA", "#D8423D")
        } else {
            levels <- c('young', 'intermediate', 'old')
            palette <- c("#0091CA", "#D3D3D3", "#D8423D")
        }

        # levels <- c('young', 'intermediate', 'old')
        # palette <- c("#0091CA", "#D3D3D3", "#D8423D")

        module_scores_mtx$Age <- factor(module_scores_mtx$Age, levels=levels)
        module_scores_mtx <- module_scores_mtx[order(module_scores_mtx$Age),]

        module_scores_mtx[, name] <- as.numeric(module_scores_mtx[, name])


        my_comparisons <- combn(levels, 2, simplify = FALSE)

        if (split == 'SSample'){
            plot <- ggviolin(module_scores_mtx, x = "Age", y = name, color = "Age",
                                    palette = palette, add = "jitter",
                                    # label="Sample",
                                    title = paste0(name, " with Age")) + 
                                    stat_compare_means(comparisons = my_comparisons,p.adjust.method="fdr", label.y = c(max(as.numeric(module_scores_mtx[,name])) * (8.0 / 10), max(as.numeric(module_scores_mtx[,name])) * (9.0 / 10))) +
            theme(plot.title = element_text(size = 12, face = "bold")) + theme(legend.position = "none")
        } else {
            plot <- ggviolin(module_scores_mtx, x = "Age", y = name, color = "Age",
                                    palette = palette, add = "jitter",
                                    # label="Sample",
                                    title = paste0(name, " with Age")) + 
                                    stat_compare_means(comparisons = my_comparisons,p.adjust.method="fdr", label.y = c(max(as.numeric(module_scores_mtx[,name])) * (7.0 / 10), max(as.numeric(module_scores_mtx[,name])) * (8.0 / 10), max(as.numeric(module_scores_mtx[,name])) * (9.0 / 10))) +
            theme(plot.title = element_text(size = 12, face = "bold")) + theme(legend.position = "none")
        }

        plots[[x]] <- plot

    }

     while (!is.null(dev.list())) dev.off()
    pdf(paste0(output_path, tag, "Mm29_module_score_analyses_with_age60_old_vlolinplot_withID_median_wFDR.pdf"), width = 16*1*1/5*number, height = 9*3/6*7/7, useDingbats=FALSE)
     print(cowplot::plot_grid(plotlist = plots, ncol = 5*1/5*number, nrow= 6*1/6*1))
    dev.off()

        obj <- hlca1; split<-"sample"
    plots <- list()
    x <- 0
    for (i in hash::keys(h)){
        print(i)
        name = i
        flag <- TRUE
        tryCatch(srt <- AddModuleScore(obj, features = h[[i]], name = name), error = function(e) flag <<-FALSE)
        if (!flag) {print(paste0("Skipping ", name))}
        if (!flag) next
        obj.list <- SplitObject(srt, split.by = split)
        x <- x + 1
        module_scores_list <- list()
        Age_status_list <- list()
        # this is mean
        for (i in 1:length(obj.list)) {
            obj2 <- obj.list[[i]]
            median_module_score <- mean(obj2@meta.data[,paste0(name, "1")])
            Age <- obj2@meta.data[,'age_trio']
            module_scores_list[i] <- median_module_score
            Age_status_list[i] <- Age
        }        
        module_scores_vec <- as.vector(module_scores_list)
        Age_status_vec <- as.vector(Age_status_list)
        names(module_scores_vec) <- names(obj.list)
        names(Age_status_vec) <- names(obj.list)
        module_scores_df <- as.data.frame(module_scores_vec) # patients (rows) vs module score (cols)
        Age_status_df <- as.data.frame(Age_status_vec)
        merged_df <- rbind(module_scores_df, Age_status_df)
        merged_df <- t(merged_df)
        colnames(merged_df) <- c(name, "Age")
        module_scores_mtx <- as.matrix(merged_df)
        module_scores_mtx <- as.data.frame(module_scores_mtx)

        if (split == 'SSample'){
            levels <- c('young', 'old')
            palette <- c("#0091CA", "#D8423D")
        } else {
            levels <- c('young', 'intermediate', 'old')
            palette <- c("#0091CA", "#D3D3D3", "#D8423D")
        }

        module_scores_mtx$Age <- factor(module_scores_mtx$Age, levels=levels)
        module_scores_mtx <- module_scores_mtx[order(module_scores_mtx$Age),]

        module_scores_mtx[, name] <- as.numeric(module_scores_mtx[, name])


        my_comparisons <- combn(levels, 2, simplify = FALSE)

        if (split == 'SSample'){
            plot <- ggviolin(module_scores_mtx, x = "Age", y = name, color = "Age",
                                    palette = palette, add = "jitter",
                                    # label="Sample",
                                    title = paste0(name, " with Age")) + 
                                    stat_compare_means(comparisons = my_comparisons,p.adjust.method="fdr", label.y = c(max(as.numeric(module_scores_mtx[,name])) * (8.0 / 10), max(as.numeric(module_scores_mtx[,name])) * (9.0 / 10))) +
            theme(plot.title = element_text(size = 12, face = "bold")) + theme(legend.position = "none")
        } else {
            plot <- ggviolin(module_scores_mtx, x = "Age", y = name, color = "Age",
                                    palette = palette, add = "jitter",
                                    # label="Sample",
                                    title = paste0(name, " with Age")) + 
                                    stat_compare_means(comparisons = my_comparisons,p.adjust.method="fdr", label.y = c(max(as.numeric(module_scores_mtx[,name])) * (7.0 / 10), max(as.numeric(module_scores_mtx[,name])) * (8.0 / 10), max(as.numeric(module_scores_mtx[,name])) * (9.0 / 10))) +
            theme(plot.title = element_text(size = 12, face = "bold")) + theme(legend.position = "none")
        }

        plots[[x]] <- plot

    }

    
    while (!is.null(dev.list())) dev.off()
    pdf(paste0(output_path, tag, "Mm29_module_score_analyses_with_age60_old_vlolinplot_withID_mean_wFDR.pdf"), width = 16*1*1/5*number, height = 9*3/6*7/7, useDingbats=FALSE)
    print(cowplot::plot_grid(plotlist = plots, ncol = 5*1/5*number, nrow= 6*1/6*1))
    dev.off()

}

#Figure_3G

srt=get(load(file = "whole dataset with over 1k cells"))

Idents(srt)="cpdb_lvl_2.5_uniform_v2"
 
srt.woRARE=subset(srt,idents=c("Goblet","Ionocyte","Mesothelium","PNEC","HSC","Tuft","pDCs"),invert=TRUE)
srt.over1k=srt
srt=srt.woRARE
 
metaGroupName="cpdb_lvl_2.5_uniform_v2"
# change features here also
Features=c("CXCL9","CXCL10","CXCL11")
#Features=c("CXCL9","CXCL10","CXCL11","CXCR3")
Annotationlevel=metaGroupName
 
Genes=Features
 
Genes_name <- paste(Genes, collapse="_")
Idents(srt)=Annotationlevel
 
table(srt$cpdb_lvl_2.5_uniform_v2)
 
 levels=c("AT1","AT2","Basal","Secretory","Multiciliated","Club",
   "SMG","Macrophages","Monocytes","DC","B","Plasma","Mast",
   "CD4T","CD8T","NK","LymphaticEC","Bloodvessels",
   "SmoothMuscle","Fibroblasts","Pericytes")
 
 
srt$cpdb_lvl_2.5_uniform_v2 <- factor(srt$cpdb_lvl_2.5_uniform_v2, levels=levels)

Plot=DotPlot(object = srt, features = Genes, group.by = Annotationlevel,scale=T) + theme(axis.text.x = element_text(angle = 45, hjust=1), panel.border = element_rect(colour = "black", fill=NA, size=0.5), panel.grid.major = element_line(colour = "gainsboro")) +
    scale_colour_gradient2(low = "navy", high = "firebrick",limits=c(-0.5,1.5),oob = scales::squish) +
    geom_point(aes(size=pct.exp), shape = 21, colour="black", stroke=0.5)&coord_flip()
 
 
pdf(file = paste0(figures.dir, "Dotplot_HLCA_Full_over1k_",Annotationlevel,"_","genes_",Genes_name,"_v2.pdf"), useDingbats = F, height = 3, width = 8)
pdf(file = paste0(figures.dir, "Dotplot_HLCA_Full_over1k_",Annotationlevel,"_","genes_",Genes_name,".pdf"), useDingbats = F, height = 3, width = 8)
print(Plot)
dev.off()

#Figure_3H

srt <- get(load(file="wole dataset path"))

Idents(srt)="cpdb_lvl_2.5_uniform_v2"
srt.myeloid=subset(srt,idents=c("DC","Macrophages","Monocytes"),invert=FALSE)

Idents(srt)="ann_level_1"
table(srt$ann_level_1)

srt.Immune=subset(srt,idents=c("Immune"))
Population="srt.myeloid"
srt_tam=srt.myeloid

ext_markers = c(
  'CXCL9','CXCL10','CXCL11')


palette=c("#0091CA","gray","#D8423D")

gtheme_no_text = theme(
      axis.text.x = element_blank(),
      axis.line =element_line(colour = 'black', size = .1),
      panel.background = element_blank()
   
  )

refined_label_meta="cpdb_lvl_2.5_uniform" 
obj=srt.Immune
Dout <- prop.table(table(obj@meta.data[,refined_label_meta], obj@meta.data[,"sample"]), 2)
rownames(Dout)
Dout
Dout_CD8T <- Dout[10,]

Dout_CD8T_df <- data.frame(
  SampleID = names(Dout_CD8T),
  CD8T_Comp = as.numeric(Dout_CD8T),
  stringsAsFactors = FALSE
)
Dout_CD8T_df <- Dout_CD8T_df %>% filter(CD8T_Comp != 0)

str(Dout_CD8T_df)


Dout_CD8T_df$CD8T_Comp <- as.numeric(Dout_CD8T_df$CD8T_Comp)

Dout_CD8T_df
logitTransform <- function(p) { 
    p <- p * 0.01
    return (log(p/(1-p)+ 0.00001))
}

Dout_CD8T_df$CD8T_Comp <- logitTransform(Dout_CD8T_df$CD8T_Comp)
Dout_CD8T_df
composition="Immune_CD8T"

ext_avg = AverageExpression (srt_tam, features = ext_markers, group.by = c('sample','age_info_60_old'))
ext_avg_df = as.data.frame (t(ext_avg$RNA))
ext_avg_df

#Change the specific gene for each run
idstokeep.cxcl11 <- ext_avg$RNA |>
    t() |>
    as.data.frame() |>
    filter(CXCL11 !=0) |>
    rownames()
idstokeep.cxcl11

idstokeep.cxcl10 <- ext_avg$RNA |>
     t() |>
     as.data.frame() |>
     filter(CXCL10 ==0)
     rownames()
idstokeep.cxcl10

idstokeep.cxcl9 <- ext_avg$RNA |>
     t() |>
     as.data.frame() |>
     filter(CXCL9 ==0)
     rownames()
idstokeep.cxcl9

ext_avg_df = ext_avg_df[idstokeep.cxcl11, ]  
ext_avg_df$CXCL11 = as.numeric(ext_avg_df$CXCL11)
ext_avg_df$CXCL11 = log2 (ext_avg_df$CXCL11+0.00001)

ext_avg_df$age_info_60_old = sapply(rownames(ext_avg_df), function(x) {
  tail(unlist(strsplit(x, '_')), n = 1)
})

ext_avg_df$SampleID = sapply(rownames(ext_avg_df), function(x) {
  sub("_[^_]+$", "", x)  
})
head(ext_avg_df)

merged_df = merge(ext_avg_df, Dout_CD8T_df, by = "SampleID")
merged_df
is.na(merged_df)
merged_df$age_info_60_old = factor (merged_df$age_info_60_old, levels = c('Young','Intermediate','Old'))
merged_df

palette=c("#0091CA","gray","#D8423D")


gtheme = theme(
      axis.text.x = element_text(angle = 45, vjust = 1, hjust=1),
      axis.line =element_line(colour = 'black', size = .1),
        axis.ticks = element_line(colour = "black", size = .1),
      panel.background = element_blank()
  )
genes_of_interest <- c('CXCL11')

cor.method = "spearman"

corr_res <- lapply(genes_of_interest, function(gene) {
  ggscatter(
    data = merged_df, 
    x = gene,  
    y = 'CD8T_Comp',  
    shape = 16,
    color = 'age_info_60_old',
    size = 0.9, 
    cor.coef = TRUE, 
    
    cor.method = cor.method,
    xlab = paste(gene, collapse=' '), 
    
    ylab = paste('T Composition', collapse=' '),
    
    title = paste0("lung", '(n=', nrow(merged_df), ')'), 
    fullrange = TRUE
  )+ 
    
            scale_color_manual(values=palette) +
            geom_smooth(method = "lm", se = FALSE, color = "black") +  
            gtheme+
            theme(
            plot.title = element_text(size = 6),  
            axis.title = element_text(size = 6),  
            axis.text = element_text(size = 6),   
            legend.title = element_text(size = 6),  
            legend.text = element_text(size = 6)
            )
})
corr_res = lapply(corr_res, function(x) ggMarginal(x, type = "density", groupColour = TRUE, groupFill = TRUE))
pdf (paste0(figures.dir,'/',cor.method,'_HLCA_FIGURE_',Population,'_CXCLs_correlation_Lung_logit_log2_omitzerosforCXCL11wholedataset_Tcell_abundance',composition,'_v5.pdf'), width = 5/2, height = 6/2)
print (wrap_plots(corr_res))
dev.off()

#Figure_3I

normal <- get(load(file="the dataset for GTex.normal.lung.UniqueGeneID.Rda"))

normal$age_trio <- "40-59"
normal$age_trio[normal$AGE == "20-29"] <- "<40"
normal$age_trio[normal$AGE == "30-39"] <- "<40"
normal$age_trio[normal$AGE == "60-69"] <- ">=60"
normal$age_trio[normal$AGE == "70-79"] <- ">=60"
normal$age_trio[is.na(normal$AGE)] <- NA

top.genes<-list()

Features=c("CD8A","CCL4","CCL5","GZMA","GZMK","NKG7")
top.genes[["Bulk_CD8T"]] = Features

modules="Bulk_CD8T"

top.genes[["CXCL9"]] = 'CXCL9'

top.genes[["CXCL10"]] = 'CXCL10'

top.genes[["CXCL11"]] = 'CXCL11'

modules=c(modules,"CXCL9","CXCL10","CXCL11")

meta=normal@meta.data

data.type<-''
input.df <- as.matrix(log10(GetAssayData(normal,slot='counts')+1))
rownames(input.df)<-rownames(GetAssayData(normal,slot='counts'))
exprs.ave.list<-list()

for (i in 1:length(modules)){
  markers<-toupper(top.genes[[i]])
  module_name<-modules[i]
  print(module_name)
  index<-which(rownames(input.df) %in% markers)
  print(length(index))
  exprs<-input.df[index,, drop = F]
  rownames(exprs)<-rownames(input.df)[index]
  
  if (length(index) == 1){
    exprs.ave.list[[i]]<-exprs
    print("boop1")
  }
  else if (length(index) > 1){
    exprs.ave.list[[i]]<-colMeans(exprs)
    print("boop2")
  }
  else {exprs.ave.list[[i]]<-NA
  print("boop3")
  print(module_name)}
}


modules<-modules[which(!is.na(exprs.ave.list))]
top.genes<-top.genes[which(!is.na(exprs.ave.list))]
exprs.ave.list[which(is.na(exprs.ave.list))]<-NULL
names(exprs.ave.list)<-paste0(modules,'_',data.type)
exprs.ave.df<-as.data.frame(t(do.call(rbind,exprs.ave.list)))

lung_meta=normal@meta.data
tmp<-cbind(lung_meta, exprs.ave.df)

tmp$age_trio <- factor(tmp$age_trio, levels = c("<40", "40-59", ">=60"))
colnames(tmp)

palette=c("#0091CA","gray","#D8423D")

gtheme = theme(
      axis.text.x = element_text(angle = 45, vjust = 1, hjust=1),
      axis.line =element_line(colour = 'black', size = .1),
        axis.ticks = element_line(colour = "black", size = .1),
      panel.background = element_blank()#,
  )

corr_res = lapply (c('CXCL9','CXCL10','CXCL11'), function(x) ggscatter(
           
            tmp[][,c(x, 'Bulk_CD8T_','age_trio')], 
            
            x = x, 
          
             y = 'Bulk_CD8T_',
          
            #palette = bulk_palette 
            shape=16,
            size=0.5,
            color = 'age_trio',
            cor.coef = TRUE, 
            font.label=6,
            cor.coef.size = 6,
            
            cor.method = "spearman",
            xlab = paste(x, collapse=' '), ylab = paste('T_', collapse=' '),
            title = paste0("lung",'(n=',nrow(tmp[]),')'), fullrange = TRUE) + 
            #scale_fill_manual (values=bulk_palette) + 
            scale_color_manual(values=palette) +
            geom_smooth(method = "lm", se = FALSE, color = "black") +  
            gtheme+
            theme(
            plot.title = element_text(size = 6),  # Title font size
            axis.title = element_text(size = 6),  # Axis titles font size
            axis.text = element_text(size = 6),   # Axis text font size
            legend.title = element_text(size = 6),  # Legend title font size
            legend.text = element_text(size = 6)
            ))

corr_res = lapply (corr_res, function(x) ggMarginal(x, type = "density", groupColour = TRUE, groupFill = TRUE))
projDir = 'output path'
pdf (paste0(projDir,'/FIGURE_CXCLs_correlation_GTEX_lung_CXCL_Bulk_T_total_v2_Tcells.pdf'), width = 11/2, height = 5/5*2.5)
print (wrap_plots (corr_res))
dev.off() 


######Supplements


####Figure_S3A

rm(list=ls())
library(Seurat)
library(patchwork)


srt=get(load(file=".../HLCA_F_QC_Adams_info_DonorLung_harmony_ageNA_removed_label_transfered_ann_finest_level_highlvl_reanotated_sn_removed_over1k_TNK.Rda"))
# over 0 cells
srt=get(load(file=".../HLCA_F_QC_Adams_info_DonorLung_harmony_ageNA_removed_label_transfered_ann_finest_level_highlvl_reanotated_sn_removed_over0_TNK.Rda"))



srt=get(load(file=".../HLCA_F_QC_Adams_info_DonorLung_harmony_ageNA_removed_label_transfered_ann_finest_level_highlvl_reanotated_sn_removed_over1k_Myeloid.Rda"))
srt=get(load(file=".../HLCA_F_QC_Adams_info_DonorLung_harmony_ageNA_removed_label_transfered_ann_finest_level_highlvl_reanotated_sn_removed_over0_Myeloid.Rda"))

srt=readRDS( file=".../hlca_full_pats_enrich_celltypes_No_Multiciliated_harmonized.rds")

force=FALSE

k_selections = c(5:30)


nfeat = 3000
cores= 100
metacells = FALSE

min_cells = 20 # default 100

metacells_k = 40
max_shared = 20
metacells_groups = 'sample'

cnmf_name='no_MetaCell_HLCA_Full_hvg_Myeloid_downsampled_normalized_over0'

cnmf_name='no_MetaCell_HLCA_Full_hvg_TNK_downsampled_over0'



library(harmony)
library(viridis)
library(ggpubr)
library(ggplot2)
library(RColorBrewer)
library(fgsea)
library(tidyr)
library(dplyr)


srt$age_info_60_old <- factor(srt$age_info_60_old, levels=c("Young","Intermediate","Old"))

force=F
nfeat = 3000
k_list = c(5:30)
k_selection = 30 
top_nmf_genes=25 
do.fgsea=TRUE 
metacells= FALSE

metaGroupNames = c('sample','CN','age_info_60_old')
metaGroupNames = c('sample','CN','Age')
metaGroupNames = c('sample','CN','Age',"age_info_60_old")
metaGroupNames = c('sample','CN','Age',"age_info_60_old","cpdb_lvl_2.5_uniform_v3")
metaGroupNames = c('sample','CN','Age',"age_info_60_old","cpdb_lvl_2.5_uniform_v4")


source(".../useful_functions.R")


org = 'human'

reductionName="umap"

if (!exists('cnmf_name')) cnmf_name = ''
cnmf_out = paste0('cNMF_normalized/cNMF_',cnmf_name,'_',paste0(k_list[1],'_',k_list[length(k_list)]),'_vf',nfeat)
dir.create (projdir, recursive=T)

cnmf_spectra = read.table (paste0(cnmf_out,'/cnmf/cnmf.spectra.k_',k_selection,'.dt_0_3.consensus.txt'))


vf = read.table (paste0(projdir,cnmf_out,'/vf',nfeat,'.txt'))[[1]]
vf = gsub ('-','.',vf)
if (all (vf == colnames(cnmf_spectra)))
      {
      vf = read.table (paste0(projdir,cnmf_out,'/vf',nfeat,'.txt'))[[1]]
      colnames (cnmf_spectra) = vf
      } else {
      message ('WARNING variable features not in same order in the spectra file!')            
      }

cnmf_spectra = t(cnmf_spectra)
max_spectra = apply (cnmf_spectra, 1, which.max)

cnmf_spectra_nonunique = lapply (1:ncol(cnmf_spectra), function(x) 
      {
      tmp = cnmf_spectra[order(-cnmf_spectra[,x]),x,drop=F]
      head(rownames(tmp),top_nmf_genes)
      })
names(cnmf_spectra_nonunique) = paste0('CN',seq_along(cnmf_spectra_nonunique))

cnmf_spectra_nonunique_full = lapply (1:ncol(cnmf_spectra), function(x) 
      {
      tmp = cnmf_spectra[order(-cnmf_spectra[,x]),x,drop=F]
      head(rownames(tmp),top_nmf_genes)
      })
names(cnmf_spectra_nonunique_full) = paste0('CN',seq_along(cnmf_spectra_nonunique_full))

cnmf_spectra_unique = lapply (1:ncol(cnmf_spectra), function(x) 
      {
      tmp = cnmf_spectra[names(max_spectra[max_spectra == x]),x,drop=F]
      tmp = tmp[order(-tmp[,1]),,drop=F]
      head(rownames(tmp),top_nmf_genes)
      })
names(cnmf_spectra_unique) = paste0('CN',seq_along(cnmf_spectra_unique))

cnmf_spectra_unique_full = lapply (1:ncol(cnmf_spectra), function(x) 
      {
      tmp = cnmf_spectra[names(max_spectra[max_spectra == x]),x,drop=F]
      tmp = tmp[order(-tmp[,1]),,drop=F]
      rownames(tmp)
      
      })
names(cnmf_spectra_unique_full) = paste0('CN',seq_along(cnmf_spectra_unique))


cnmf_spectra_nonunique


ModScoreCor2 = function (seurat_obj, geneset_list, listName, cor_threshold = NULL, pos_threshold = .1, outdir)
        {        
        message ('Run AddModuleScore')
        
        seurat_obj = AddModuleScore (seurat_obj, geneset_list)
        seurat_obj@meta.data = seurat_obj@meta.data[, !colnames (seurat_obj@meta.data) %in% names (geneset_list)]
        colnames(seurat_obj@meta.data)[colnames(seurat_obj@meta.data) %in% paste0('Cluster',seq_along(geneset_list))] = names (geneset_list)
        message (paste('Annotate cells based on highest module score and store in column:',paste0(listName, '_r',cor_threshold,'_max')))
        if (length (geneset_list) == 1) 
          {
          seurat_obj@meta.data[, paste0(listName, '_r',cor_threshold,'_max')] = ifelse (seurat_obj@meta.data[,names (geneset_list)] > pos_threshold, 'pos','neg')
          pdf (paste0(outdir, listName, '_modulescore_distribution_cor_threshold_',cor_threshold,'_score_',pos_threshold,'.pdf'))
          hist (seurat_obj@meta.data[,names(geneset_list)])
          abline (v = pos_threshold)
          dev.off()
          } else {
          seurat_obj@meta.data[, paste0(listName, '_r',cor_threshold,'_max')] = sapply (seq_along(colnames(seurat_obj)), function(x) colnames(seurat_obj@meta.data[,names(geneset_list)])[which.max (seurat_obj@meta.data[x,names(geneset_list)])])           
          }
        if (!is.null(cor_threshold))
                {
                message ('cor_threshold provided! Filtering gene sets based on initial correlation to module score')  
                filtered_geneset_list = list()
                geneset_cor_list = list()
                for (i in names(geneset_list))
                        {       
                        geneset_cor = cor (seurat_obj@meta.data[,i], as.matrix(t(seurat_obj@assays$RNA@data[rownames(seurat_obj@assays$RNA@data) %in% geneset_list[[i]],])))
                        geneset_cor_list[[i]] = geneset_cor
                        geneset_cor_names = colnames (geneset_cor)[geneset_cor > cor_threshold]
                        geneset_cor_names = geneset_cor_names[!is.na (geneset_cor_names)]
                        filtered_geneset_list[[i]] = geneset_cor_names
                        }
                if (!is.null (outdir)) 
                        {
                        lapply (seq_along(filtered_geneset_list), function(x) write.csv (filtered_geneset_list[[x]], paste0(outdir,'Corfiltered_Module_score_gene_list_', names(filtered_geneset_list)[x],'.csv')))
                        pdf (paste0(outdir, listName, 'Corfiltered_modulescore_distribution.pdf'))
                        lapply (seq_along(filtered_geneset_list), function(x) 
                                {
                                hist (geneset_cor_list[[x]], title = names(geneset_cor_list)[x])
                                abline (v = cor_threshold)
                                })
                        dev.off()
                        }
                message ('Re-run AddModuleScore using corfiltered genes')
                seurat_obj = AddModuleScore (seurat_obj, filtered_geneset_list, name = listName)
                seurat_obj@meta.data = seurat_obj@meta.data[, !colnames (seurat_obj@meta.data) %in% paste0(names(geneset_list),'_r',cor_threshold)]
                colnames(seurat_obj@meta.data)[colnames(seurat_obj@meta.data) %in% paste0('Cluster',seq_along(geneset_list))] = paste0(names(geneset_list),'_r',cor_threshold)
                if (length (geneset_list) == 1) 
                  {
                  seurat_obj@meta.data[, paste0(listName, '_r',cor_threshold,'_max')] = ifelse (seurat_obj@meta.data[,paste0(names(geneset_list),'_r',cor_threshold)] > pos_threshold, 'pos','neg')
                  pdf (paste0(outdir, listName, '_modulescore_distribution_cor_threshold_',cor_threshold,'_score_',pos_threshold,'.pdf'))
                  hist (seurat_obj@meta.data[,paste0(names(geneset_list),'_r',cor_threshold)])
                  abline (v = pos_threshold)
                  dev.off()
                  } else {
                  seurat_obj@meta.data[, paste0(listName, '_r',cor_threshold,'_max')] = sapply (seq_along(colnames(seurat_obj)), function(x) colnames(seurat_obj@meta.data[,paste0(names(geneset_list),'_r',cor_threshold)])[which.max (seurat_obj@meta.data[x,paste0(names(geneset_list),'_r',cor_threshold)])])        
                  }
                }
        return (seurat_obj)
        } 


cnmf_spectra_nonunique

message ('test AddModuleScore: top25')
flag <- TRUE
tryCatch(srt <- AddModuleScore(srt, features = cnmf_spectra_nonunique), error = function(e) flag <<-FALSE)
if (!flag) {print(paste0("Skipping ",  names(obj.subtype.list[1])))}
if (!flag) {
  i=i+1
} else {
  srt = ModScoreCor2 (
        seurat_obj = srt, 
        geneset_list = cnmf_spectra_nonunique, 
        cor_threshold = NULL, 
        pos_threshold = NULL, # threshold for fetal_pval2
        listName = 'CN', outdir = paste0(projdir,'Plots/'))
}


srt$CN = 'CN'
ccomp_df = srt@meta.data[,c(names(cnmf_spectra_nonunique), metaGroupNames), drop=FALSE]
library(ComplexHeatmap)
library(circlize)
library(dplyr)
library(tidyr)
library(reshape2)


cn_columns <- ccomp_df %>% select(starts_with("CN"))

non_numeric_cols <- cn_columns %>% 
  summarise(across(everything(), ~any(!is.numeric(.)))) %>% 
  pivot_longer(everything(), names_to = "column", values_to = "non_numeric") %>% 
  filter(non_numeric)

print(non_numeric_cols)


ccomp_df$CN=NULL

ccomp_df$LTforUnknown_ann_finest_level=ccomp_df[,metaGroupNames[5]]

sample_level_data <- ccomp_df %>%
  select(starts_with("CN"), sample, Age, LTforUnknown_ann_finest_level) %>%
  group_by(sample, Age, LTforUnknown_ann_finest_level) %>%
  dplyr::summarise(across(starts_with("CN"), sum, na.rm = TRUE), .groups = 'drop')



cor_results <- sample_level_data %>%
  group_by(LTforUnknown_ann_finest_level) %>%

                   list(cor = ~cor.test(., Age, method = "spearman")$estimate,
                        pval = ~cor.test(., Age, method = "spearman")$p.value),
                   .names = "{.col}_{.fn}")) %>%
  mutate(across(ends_with("_pval"), ~p.adjust(., method = "fdr")))

cor_data <- cor_results %>%
  pivot_longer(cols = -LTforUnknown_ann_finest_level, names_to = c("CN", ".value"), 
               names_pattern = "(CN\\d+)_(cor|pval)")


cor_data_cor <- cor_data %>%
  select(LTforUnknown_ann_finest_level, CN, cor)

cor_data_pval <- cor_data %>%
  select(LTforUnknown_ann_finest_level, CN, pval)

# Step 2: Pivot wider ensuring unique row identifiers
cor_matrix <- cor_data_cor %>%
  pivot_wider(names_from = CN, values_from = cor) %>%
  as.data.frame()

pval_matrix <- cor_data_pval %>%
  pivot_wider(names_from = CN, values_from = pval) %>%
  as.data.frame()

rownames(cor_matrix) <- paste(cor_matrix$LTforUnknown_ann_finest_level, seq_len(nrow(cor_matrix)), sep = "_")
rownames(pval_matrix) <- paste(pval_matrix$LTforUnknown_ann_finest_level, seq_len(nrow(pval_matrix)), sep = "_")

cor_matrix <- cor_matrix %>% select(-LTforUnknown_ann_finest_level)
pval_matrix <- pval_matrix %>% select(-LTforUnknown_ann_finest_level)

cor_matrix <- as.matrix(cor_matrix)
pval_matrix <- as.matrix(pval_matrix)


heatmapAnnotation <- function(j, i, x, y, w, h, fill) {
    if(abs(cor_matrix[i, j]) != 0) {  # Customize the threshold for significance
        if(pval_matrix[i, j] < 0.01) {
            grid::grid.text("**", x, y)
        } else if(pval_matrix[i, j] < 0.05) {
            grid::grid.text("*", x, y)
        }
    }
}


p_heatmap <- ComplexHeatmap::Heatmap(cor_matrix, 
                                     name = "Spearman Correlation",
                                     col = colorRamp2(c(-1, 0, 1), c("blue", "white", "red")),
                                     cluster_rows = FALSE, 
                                     cluster_columns = FALSE, 
                                     row_names_gp = grid::gpar(fontsize = 6),  
                                     column_names_gp = grid::gpar(fontsize = 6),  
                                     heatmap_legend_param = list(
                                       title_gp = grid::gpar(fontsize = 6),  
                                       labels_gp = grid::gpar(fontsize = 6) 
                                     ),
                                     rect_gp = grid::gpar(col = "white", lwd = 2),
                                     cell_fun = heatmapAnnotation)


projDir=projdir

    
    
                         
    pdf(file = file.path(projDir,cnmf_out,  
                         
                         paste("/Composition_analysis_spearman_hlca_",metaGroupNames[5], "_TNK_both.pdf", sep = ".")),
                        
        width = 12/5.5, 
        height = 1.5) 
    
    print(p_heatmap)
    dev.off()


####Figure_S3B
rm(list=ls())
library(ggplot2)
library(Seurat)
library(dplyr)
library(Matrix)
require(muscat) 
require(limma)
library(SingleCellExperiment)
library(scater) 
library(ggrepel)
library(patchwork)
library(tidyr)
library(fgsea) 
require(GO.db) 
require(org.Hs.eg.db) 
library(RColorBrewer)
library(argparse)
require (muscat)
library(muscat)
require (limma)
library(SingleCellExperiment)


srt=get(load(file=".../HLCA_F_QC_Adams_info_DonorLung_harmony_ageNA_removed_label_transfered_ann_finest_level_highlvl_reanotated_sn_removed_over1k_TNK.Rda"))
projDir <- "..."


force = FALSE
do.fgsea = TRUE
logfcThreshold = .25
pvalAdjTrheshold = 0.05
ds_method = "DESeq2"
metaGroupName1 = 'sample'
metaGroupName2 = 'cpdb_lvl_2.5_uniform_v2' 
metaGroupName3 = 'age_info_60_old'
muscatIdents = c('Old','Young')

pbDS_min_cells = 10
topGenes = 40
org = 'human'
source(".../useful_functions.R")

if (!file.exists (paste0(projDir, 'muscatall_pseudobulks_',metaGroupName2,'_method_',ds_method,'.rds')) | force)
	{
	message ('Convert seurat object to SingleCellExperiment object')
	ei = data.frame (
		sample_id = as.factor(srt@meta.data[,metaGroupName1]),
		cluster_id = as.factor(srt@meta.data[,metaGroupName2]),
		group_id = as.factor(srt@meta.data[,metaGroupName3]))
	rownames(ei) <- colnames(srt)
	sce <- SingleCellExperiment (list(counts=srt@assays$RNA@counts, logcounts = srt@assays$RNA@data),
    	colData=ei,          
    	rowData=rownames(srt),
    	metadata=list(experiment_info = ei))
 
	nigenes = NI.genes (rownames (sce),
			ni.goterms = c('ribosome biogenesis', 'ncRNA processing','RNA processing','oxidation.reduction process','NADH oxidatio'),
			ni.genes = c('^MT','^RPL','^mt-','^RPS','^MT-')) # remove batchy genes
	sce = sce[!rownames (sce) %in% nigenes, ]
 

message ('Generate pseudobulks')
pb <- aggregateData (sce,
    	assay = "counts", fun = "sum",
    	by = c('cluster_id', 'sample_id'))
    	# run pseudobulk (aggregation-based) DS analysis
	message ('Run muscat DS test')
	# mm = model.matrix (~ 0 + ei$group_id+ei$batch_id)
	mm = model.matrix (~ 0 + ei$group_id)
	dimnames(mm) = list(ei$sample_id, levels(as.factor(ei$group_id)))
	contrast = makeContrasts(paste0(muscatIdents[1],'-',muscatIdents[2]), levels = mm)
	ds_pb = pbDS(pb, design = mm, contrast = contrast,  method= ds_method, min_cells=pbDS_min_cells,filter="none") ##stopped here##
	
	saveRDS (sce, paste0(projDir, 'muscatall_sce_',metaGroupName2,'_method_',ds_method,'.rds'))
	saveRDS (pb, paste0(projDir, 'muscatall_pseudobulks_',metaGroupName2,'_method_',ds_method,'.rds')) #Pseudobulk and SCE object will be same
	saveRDS (ds_pb, paste0(projDir, 'muscatall_results_',metaGroupName2,'_method_',ds_method,pbDS_min_cells,'.rds')) ###Only this entity needs to be generated under 10, 1000 cells and 2000 cells.
	} else {
	sce = readRDS (paste0(projDir, 'muscatall_sce_',metaGroupName2,'_method_',ds_method,'.rds'))
	pb = readRDS (paste0(projDir, 'muscatall_pseudobulks_',metaGroupName2,'_method_',ds_method,'.rds'))
	ds_pb = readRDS	(paste0(projDir, 'muscatall_results_',metaGroupName2,'_method_',ds_method,pbDS_min_cells,'.rds'))
}



sce = readRDS (paste0(projDir, 'muscatall_sce_',metaGroupName2,'_method_',ds_method,'.rds'))
pb = readRDS (paste0(projDir, 'muscatall_pseudobulks_',metaGroupName2,'_method_',ds_method,'.rds'))
ds_pb = readRDS	(paste0(projDir, 'muscatall_results_',metaGroupName2,'_method_',ds_method,pbDS_min_cells,'.rds'))


tbl_df = do.call (rbind, ds_pb[['table']][[1]])
colnames (tbl_df)[colnames (tbl_df) == 'logFC'] = 'avg_log2FC'
colnames (tbl_df)[colnames (tbl_df) == 'p_adj.loc'] = 'p_val_adj'
colnames (tbl_df)[colnames (tbl_df) == 'cluster_id'] = 'cluster'

addGene = c("WNT1", "WNT2", "WNT2B", "WNT3", "WNT3A", "WNT4", "WNT5A", "WNT5B", "WNT6", "WNT7A", "WNT7B", "WNT8A", "WNT8B", "WNT9A", "WNT9B", "WNT10A", "WNT10B", "WNT11", "WNT16",
			'FZD1', "FZD2", "FZD3", "FZD4", "FZD6", "FZD7", "FZD8", "FZD9", "FZD10", "LRP5", "LRP6", "ROR1", "ROR2", "RYK", "CTNNB1", "AXIN1", "AXIN2", "DVL1", "PLCB1", "WIF1") ## insert your gene list of interest here
# TNK modules
addGene = c("GZMH", "CD8A", "CCL5", "HCST", "CD3D", "CD8B", "GZMA", "NKG7", "CD3G", "IL32", # CN8
	"CD3E", "CST7", "SH3BGRL3", "CD52", "UCP2", "IL2RG", "PFN1", "GIMAP4", # CN8
	"LITAF", "CORO1A", "ITGB2", "LIMD2", "RAC2", "S100A4", "IFITM1", # CN8
	"TNFAIP3", "ZFP36", "KLF6", "CD69", "NFKBIA", "FOS", "FOSB", "PPP1R15A", # CN9
	"BTG2", "RGCC", "NFKBIZ", "EGR1", "JUNB", "JUN", "LMNA", "DUSP1", # CN9
	"TSC22D3", "CSRNP1", "MYADM", "PHLDA1", "ZFP36L2", "YPEL5", "IER2", "PER1", "MCL1",# CN9
	"XCL2", "CCL4", "CCL3", "NR4A2", "CCL4L2", "EGR2", "IRF8", "XCL1", "DUSP2", "IFNG", 
	"ID2", "NFKBID", "SDCBP", "AMD1", "CD160", "MAFF", "SLA", "CHMP1B", "UBB", "TRDC", 
	"SELENOK", "HOPX", "CREM", "CLEC2B", "MCL1", # CN10
	"DNAJB1", "HSPE1", "HSPH1", "HSP90AA1", "HSPB1", "HSPA6", "ZFAND2A", "HSPA8", "HSPD1", "HSP90AB1", "BAG3", "DNAJA1", "NR4A1", "DUSP1", "CACYBP", "UBB", "DNAJB4", "PPP1R15A", "JUN", "SERPINH1", "IER5", "RHOB", "ANKRD37", "NEU1", "GADD45B"
	)

addGene = c("GZMH", "CD8A", "CCL5", "HCST", "CD3D", "CD8B", "GZMA", "NKG7", "CD3G", "IL32", # CN8
	"CD3E", "CST7", "SH3BGRL3", "CD52", "UCP2", "IL2RG", "PFN1", "GIMAP4", # CN8
	"LITAF", "CORO1A", "ITGB2", "LIMD2", "RAC2", "S100A4", "IFITM1")

addGene = c("TNFAIP3", "ZFP36", "KLF6", "CD69", "NFKBIA", "FOS", "FOSB", "PPP1R15A", # CN9
	"BTG2", "RGCC", "NFKBIZ", "EGR1", "JUNB", "JUN", "LMNA", "DUSP1", # CN9
	"TSC22D3", "CSRNP1", "MYADM", "PHLDA1", "ZFP36L2", "YPEL5", "IER2", "PER1", "MCL1")

addGene=c("XCL2", "CCL4", "CCL3", "NR4A2", "CCL4L2", "EGR2", "IRF8", "XCL1", "DUSP2", "IFNG", 
	"ID2", "NFKBID", "SDCBP", "AMD1", "CD160", "MAFF", "SLA", "CHMP1B", "UBB", "TRDC", 
	"SELENOK", "HOPX", "CREM", "CLEC2B", "MCL1") #CN10
addGene=c(	"DNAJB1", "HSPE1", "HSPH1", "HSP90AA1", "HSPB1", "HSPA6", "ZFAND2A", "HSPA8", "HSPD1", "HSP90AB1", "BAG3", "DNAJA1", "NR4A1", "DUSP1", "CACYBP", "UBB", "DNAJB4", "PPP1R15A", "JUN", "SERPINH1", "IER5", "RHOB", "ANKRD37", "NEU1", "GADD45B"
)

# Myeloid modules

addGene = c("FOS", "RHOB", "ATF3", "FOSB", "KLF4", "JUN", "ZFP36", "KLF2", 
	"DUSP1", "NR4A1", "JUNB", "KLF6", "NFKBIZ", "BTG2", "PPP1R15A", "IER2",
	 "BHLHE40", "MIR4485", "ZFP36L2", "EGR1", "CYBB", "DNAJB1", "CD83", "TSC22D3", "CITED2",# cn3
	 "TMSB4X", "RAB5IF", "ATP5F1E", "SELENOH", "BLOC1S1", "ATP5MG", "GPX1", "ATP5MF", 
	 "ATP5PO", "ATP5ME", "CSTB", "ELOB", "NBEAL1", "NDUFA11", "S100A6", "ATP5MK", 
	 "DYNLL1", "CSTA", "ATP5MC3", "NDUFC2", "PELATON", "FTH1", "FTL", "ARPC1B", "LGALS1", #cd4
	 "CXCL10", "GBP1", "GBP5", "IFIT2", "TNFSF10", "IFIT1", "IFIT3", "ISG15", "CXCL9", 
	 "IDO1", "STAT1", "MX1", "CCL8", "TNFSF13B", "WARS1", "SAA1", "CALHM6", "VAMP5", 
	 "ISG20", "IRF7", "CCL5", "GBP2", "IL4I1", "SLAMF7", "IRF1", # 25
	 "TYMS", "RRM2", "NUSAP1", "UBE2C", "STMN1", "H4C15", "HMGB2", "PCLAF", 
	 "CTD-2116N17.1", "PHF19", "HMGN2", "ATAD2", "CKS2", "TMPO", "CENPU", "HS3ST4", 
	 "CEP128", "PLP2", "HMGB1P5", "TUBA1B", "EZH2", "LMNB1", "THSD4", "FADS1", "POLA1" #30
	 )

addGene = c("FOS", "RHOB", "ATF3", "FOSB", "KLF4", "JUN", "ZFP36", "KLF2", 
	"DUSP1", "NR4A1", "JUNB", "KLF6", "NFKBIZ", "BTG2", "PPP1R15A", "IER2",
	 "BHLHE40", "MIR4485", "ZFP36L2", "EGR1", "CYBB", "DNAJB1", "CD83", "TSC22D3", "CITED2")# cn3

addGene=c(	 "TMSB4X", "RAB5IF", "ATP5F1E", "SELENOH", "BLOC1S1", "ATP5MG", "GPX1", "ATP5MF", 
	 "ATP5PO", "ATP5ME", "CSTB", "ELOB", "NBEAL1", "NDUFA11", "S100A6", "ATP5MK", 
	 "DYNLL1", "CSTA", "ATP5MC3", "NDUFC2", "PELATON", "FTH1", "FTL", "ARPC1B", "LGALS1" #cd4
)

addGene=c(	 "CXCL10", "GBP1", "GBP5", "IFIT2", "TNFSF10", "IFIT1", "IFIT3", "ISG15", "CXCL9", 
	 "IDO1", "STAT1", "MX1", "CCL8", "TNFSF13B", "WARS1", "SAA1", "CALHM6", "VAMP5", 
	 "ISG20", "IRF7", "CCL5", "GBP2", "IL4I1", "SLAMF7", "IRF1" # 25
)

addGene=c(	 "TYMS", "RRM2", "NUSAP1", "UBE2C", "STMN1", "H4C15", "HMGB2", "PCLAF", 
	 "CTD-2116N17.1", "PHF19", "HMGN2", "ATAD2", "CKS2", "TMPO", "CENPU", "HS3ST4", 
	 "CEP128", "PLP2", "HMGB1P5", "TUBA1B", "EZH2", "LMNB1", "THSD4", "FADS1", "POLA1" #30
)

addGene=c("LIPA", "RARRES1", "GPNMB", "PLA2G7", "MATK", "CHIT1", "SPARC", "APOE", "MMP9", "CTSK", "CHI3L1", "A2M", "LILRB4", "PLD3", "TREM2", "LGMN", "CSTB", "MGLL", "OTOA", "CD36", "NR1H3", "CD84", "CAPG", "CD9", "PLEK")

addGene=c("KRT7", "S100A10", "KRT8", "KRT18", "TAGLN2", "CTSE", "ANXA2", "TNFRSF12A", "EMP3", "CD151", "TRAM1", "CRIP2", "TAGLN", "YWHAH", "ANXA3", "CST6", "IL32", "CALM2", "HSP90AA1", "MIR4435-2HG", "CAPG", "TUBA1B", "GKN2", "FSTL3", "TMSB4X")
# cn17/30 epithelial woMC
addGene=c("KRT7", "S100A10", "KRT8", "KRT18", "TAGLN2", "CTSE", "ANXA2", "TNFRSF12A", "EMP3", "CD151", "TRAM1", "CRIP2", "TAGLN", "YWHAH", "ANXA3", "CST6", "IL32", "CALM2", "HSP90AA1", "MIR4435-2HG", "CAPG", "TUBA1B", "GKN2", "FSTL3", "TMSB4X")
# cn18/30 at only
addGene=c("ANXA2", "KRT7", "KRT8", "KRT19", "PRSS23", "IL32", "S100A10", "HSPB1", "CTSE", "KRT18", "ACTG1", "TAGLN", "CD151", "LGALS1", "TAGLN2", "TACSTD2", "PKM", "TUBA1A", "CRIP2", "CD24", "CAPG", "TPM4", "EMP3", "PLP2", "YWHAH")
# cn16 alveolar only abandon run 
addGene=c("KRT17", "TAGLN", "CXCL14", "PRSS23", "SOX4", "CTSE", "MDK", "SLCO2A1", "RAB32", "TACSTD2", "TMSB10", "LBH", "MYL9", "MXRA8", "MMP7", "CLIC3", "CD151", "CDKN2B", "CD24", "NEXN", "TRAM1", "NME2", "RAB27B", "CLDN4", "TUBA1A")

# Mm29 in myeloid over0

addGene=c("GBP1", "CXCL10", "ISG15", "GBP5", "IFIT2", "IFIT3", "IFIT1", "STAT1", "EPSTI1", "MX1", "WARS1", "IFI44L", "TNFSF10", "CXCL9", "ISG20", "TNFSF13B", "VAMP5", "CALHM6", "IFITM3", "IRF7", "GBP2", "PLEK", "TNIP3", "SP110", "XAF1")

# Mm3 in myeloid over0

addGene=c("TMSB4X", "RAB5IF", "ATP5F1E", "SELENOH", "ATP5MG", "ATP5PO", "BLOC1S1", "GPX1", "NDUFA11", "ATP5MF", "NBEAL1", "ATP5MC3", "ELOB", "ATP5MK", "ARPC1B", "CSTB", "ATP5MJ", "ATP5ME", "NDUFC2", "FTH1", "DYNLL1", "S100A6", "CD63", "FTL", "PELATON")

# TM4 in TNK over 0
addGene=c("TNFAIP3", "ZFP36", "ZFP36L2", "TSC22D3", "KLF6", "CD69", "NFKBIA", "NFKBIZ", "BTG2", "SOCS1", "BTG1", "FOSB", "RGCC", "FOS", "PER1", "ZFAND5", "DUSP2", "AREG", "MCL1", "PPP1R15A", "FAM177A1", "DUSP1", "YPEL5", "DDX3Y", "KDM6B")
# TM12 in TNK over 0
addGene=c("DNAJB1", "HSP90AA1", "HSPE1", "HSPH1", "HSPB1", "HSPA8", "NR4A1", "ZFAND2A", "HSPD1", "JUN", "PPP1R15A", "DNAJA1", "HSP90AB1", "HSPA6", "DUSP1", "BAG3", "UBB", "CACYBP", "RHOB", "GADD45B", "NEU1", "DNAJB4", "BTG2", "ATF3", "FOSB")
# TM8 in TNK over 0
addGene=c("CD8A", "CD8B", "CCL5", "LIMD2", "GZMH", "GZMA", "IL32", "SH3BGRL3", "GIMAP4", "GZMK", "CD3E", "PSMB10", "PFN1", "CORO1A", "CD52", "IFITM1", "CNN2", "HCST", "NKG7", "COTL1", "CD3D", "UBE2V1", "ATP5MC2", "UCP2", "ACTB")
# TM7 in TNK over 0
addGene=c("CCL3", "CCL4", "XCL2", "NR4A2", "CCL4L2", "DUSP2", "IRF8", "IFNG", "XCL1", "ID2", "CD160", "NFKBID", "EGR2", "TRDC", "MAFF", "SLA", "KLRD1", "CHMP1B", "AMD1", "GZMB", "CMC1", "UBB", "PMAIP1", "SDCBP", "HOPX")
# TM2 in TNK over 0
addGene=c("PRF1", "SPON2", "FCGR3A", "NKG7", "CTSW", "FCER1G", "GNLY", "FGFBP2", "TYROBP", "CST7", "ITGB2", "CLIC3", "CD7", "TTC38", "CD247", "SH2D1B", "KLRF1", "S1PR5", "EFHD2", "AKR1C3", "FGR", "GZMA", "APMAP", "RAC2", "HOPX")



addGene=unique(addGene)
tbl_df = tbl_df[tbl_df$gene %in% addGene,]

# HEatmap
clu.name = unique(tbl_df$cluster)

avglog2fc.df = pvals.df = matrix(nrow = length(unique(tbl_df$cluster)), ncol = length(addGene))
rownames(avglog2fc.df) = rownames(pvals.df) = clu.name
colnames(avglog2fc.df) = colnames(pvals.df) = addGene

for (i in 1:nrow(avglog2fc.df))
{
  cat("\r", i)
  for (j in 1:ncol(avglog2fc.df))
  {
    se = which(tbl_df$cluster == rownames(avglog2fc.df)[i] & tbl_df$gene == colnames(avglog2fc.df)[j])
    if (length(se) == 0) {next}
    avglog2fc.df[i,j] = tbl_df[se,"avg_log2FC"] 
    pvals.df[i,j] = tbl_df[se, "p_val"]
  }
}

avglog2fc.df = as.data.frame(avglog2fc.df)
pvals.df = as.data.frame(pvals.df)


pvals.df[pvals.df <= 0.01] <- "**"
pvals.df[pvals.df > 0.01 & pvals.df <= 0.05] <- "*"
pvals.df[is.na(pvals.df)] <- ""
pvals.df[pvals.df > 0.05] <- ""



range <- max(abs(avglog2fc.df), na.rm = T)

avglog2fc.df[,names(which(sapply(avglog2fc.df, function(x)all(is.na(x)))))] <- NULL 
pvals.df <- pvals.df[,colnames(avglog2fc.df)] # remove cols with all NAs

library(pheatmap)



avglog2fc.df=avglog2fc.df[-3,]
pvals.df=pvals.df[-3,]


file.path = projDir

dir.create(file.path)
Plot=pheatmap(avglog2fc.df, 
         cluster_rows = F,
         cluster_cols = F,
         display_numbers = pvals.df, 
         breaks = seq(-range, range, length.out = 100),  
         cellheight=8,
         cellwidth=8, 
         color = colorRampPalette(c("navy", "white", "firebrick"))(100),
         fontsize = 6,          
         fontsize_row = 6,      
         fontsize_col = 6)       )

pdf(file = paste0(file.path, "muscat_heatmap_cpdb_lvl_2.5_v2_pbDS_min_cells",pbDS_min_cells,".pdf"), useDingbats = F, height = 12/6, width = 15/3)
print(Plot)
dev.off()

